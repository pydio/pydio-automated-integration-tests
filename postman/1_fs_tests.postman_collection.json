{
	"variables": [],
	"info": {
		"name": "1 - API V2 basic  FS tests",
		"_postman_id": "b92a004e-3666-ddbd-d483-a9dfb4e4d18c",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1 - Users",
			"description": "Request about users, check current user is admin and create user",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"created\"] = jsonData.reload.pendingSelection === postman.getEnvironmentVariable(\"cur_user\");",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"cur_user\", \"user_test_swago\");",
									"postman.setEnvironmentVariable(\"cur_password\", \"security\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/people/{{cur_user}}?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "resourceType",
									"value": "user",
									"type": "text"
								},
								{
									"key": "userPass",
									"value": "{{cur_password}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Preferences List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/user/preferences?format=json",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"password changed\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200){",
									"    postman.setEnvironmentVariable(\"cur_password\", postman.getEnvironmentVariable(\"new_password\"));",
									"    postman.clearEnvironmentVariable(\"new_password\");",
									"}",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"new_password\", \"secureswag\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/people/{{cur_user}}?format=json",
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"resourceType\":\"user\",\"parameterName\":\"userPass\",\"parameterValue\":\"{{new_password}}\"}"
						},
						"description": "Update user password"
					},
					"response": []
				},
				{
					"name": "User details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/user?format=json",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2 - Workspaces & roles & Users",
			"description": "All workspaces requests, creating and renaming workspace",
			"item": [
				{
					"name": "Create Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"new_ws_slug\", \"my-swagger\");",
									"postman.setEnvironmentVariable(\"new_ws_label\", \"My Swagger\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/workspaces?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "payload",
									"value": "{\n  \"securityScope\": \"USER\",\n  \"slug\": \"{{new_ws_slug}}\",\n  \"display\": \"{{new_ws_label}}\",\n  \"displayStringId\": 432,\n  \"accessType\": \"fs\",\n  \"writeable\": false,\n  \"isTemplate\": false,\n  \"parameters\": {\n    \"CREATION_TIME\": 1468593800,\n    \"USER_DESCRIPTION\": 476,\n    \"PATH\": \"AJXP_DATA_PATH/myswag\",\n    \"CREATE\": true,\n    \"RECYCLE_BIN\": \"recycle_bin\",\n    \"CHMOD_VALUE\": \"0600\",\n    \"DEFAULT_RIGHTS\": \"rw\",\n    \"PAGINATION_THRESHOLD\": 500,\n    \"PAGINATION_NUMBER\": 200\n  },\n  \"features\": {\n    \"metastore.serial\": {\n      \"METADATA_FILE\": \".ajxp_meta\",\n      \"METADATA_FILE_LOCATION\": \"infolders\"\n    },\n    \"meta.user\": {\n      \"meta_fields\": \"tags\",\n      \"meta_labels\": \"Tags\",\n      \"meta_visibility\": \"hidden\"\n    },\n    \"meta.filehasher\": [],\n    \"meta.watch\": [],\n    \"meta.syncable\": {\n      \"REPO_SYNCABLE\": true\n    },\n    \"meta.exif\": {\n      \"meta_fields\": \"COMPUTED_GPS.GPS_Latitude,COMPUTED_GPS.GPS_Longitude\",\n      \"meta_labels\": \"Latitude,Longitude\"\n    },\n    \"index.lucene\": {\n      \"index_meta_fields\": \"tags\",\n      \"repository_specific_keywords\": \"AJXP_USER\"\n    }\n  },\n  \"INFO\": {\n    \"users\": 12,\n    \"shares\": 74\n  }\n}",
									"type": "text"
								}
							]
						},
						"description": "Create a workspace, we gonna do all file test in this ws"
					},
					"response": []
				},
				{
					"name": "Find the new created workspace unique id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var keys = Object.keys(jsonData.data.children);",
									"",
									"for (var i = 0; i < keys.length; i++){",
									"    ",
									"    var key = keys[i];",
									"    var ws = jsonData.data.children[key];",
									"    console.log(ws.slug);",
									"    if (ws.slug === postman.getEnvironmentVariable(\"new_ws_slug\")){",
									"        ",
									"        postman.setEnvironmentVariable(\"created_ws_id\", ws.repository_id)",
									"        tests[\"workspace\"] = true;",
									"        return;",
									"    }",
									"    ",
									"}",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/workspaces?format=json",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"postman.setEnvironmentVariable(\"new_role_id\", \"swaggerRole\")"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/roles/{{new_role_id}}?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"icon\": \"user-acl.png\",\n  \"rights_summary\": \"Pour more swag-read and swag-write on repo swagger\",\n  \"is_default\": \"\",\n  \"ajxp_mime\": \"role\",\n  \"role_id\": \"{{new_role_id}}\",\n  \"role\": {\n    \"ACL\": {\n      \"{{created_ws_id}}\": \"rw\"\n    },\n    \"MASKS\": [],\n    \"ACTIONS\": [],\n    \"PARAMETERS\": {},\n    \"APPLIES\": []\n  },\n  \"path\": \"AJXP_SWAG_/USER\",\n  \"label\": \"AJXP_SWAG_/USER\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Edit Newly Created Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/roles/{{new_role_id}}?format=json",
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ACL\": {\n      \"{{created_ws_id}}\": \"rw\"\n    },\n    \"MASKS\": [],\n    \"ACTIONS\": [],\n    \"PARAMETERS\": {},\n    \"APPLIES\": []\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Assign Created Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/{{cur_user}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"{{cur_user}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"resourceType\":\"user\",\"parameterName\":\"userAddRole\",\"parameterValue\":\"{{new_role_id}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Check has the newly created ws",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if(tests[\"repo list\"]) {",
									"    var ws;",
									"    for(var i = 0; i < jsonData.repositories.repo.length; i++) {",
									"        var repo = jsonData.repositories.repo[i];",
									"        if((tests[\"role assignment\"] = (repo[\"@slug\"] === \"my-swagger\")) === true){",
									"            return;",
									"        }",
									"    }",
									"}",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/user?format=json",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic e3tjdXJfdXNlcn19Ont7Y3VyX3Bhc3N3b3JkfX0=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3 - Files",
			"description": "",
			"item": [
				{
					"name": "/fs/file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var created = jsonData.nodesDiff.add[0];",
									"",
									"if(created){",
									"    tests[\"created\"] = created.path.endsWith(postman.getEnvironmentVariable(\"file\"));",
									"}",
									"",
									"tests[\"created\"] = created",
									"postman.clearEnvironmentVariable(\"file\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var name = Math.random().toString(36).substring(5);",
									"postman.setEnvironmentVariable(\"file\", name);",
									"var ws = postman.getEnvironmentVariable(\"created_ws_id\");",
									"postman.setEnvironmentVariable(\"workspace\", ws);",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{file}}?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "Create an empty text file in the created workspace"
					},
					"response": []
				},
				{
					"name": "/fs/folder/",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var created = jsonData.nodesDiff.add[0];",
									"if(created){",
									"    tests[\"created\"] = created.path.endsWith(postman.getEnvironmentVariable(\"folder\"));",
									"}",
									"tests[\"created\"] = created"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var name = Math.random().toString(36).substring(5);",
									"var filelist = postman.setEnvironmentVariable(\"folder\", name);",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "Create a folder in the created workspace"
					},
					"response": []
				},
				{
					"name": "Select working folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var count = jsonData.pagination? jsonData.pagination.count : jsonData.children.length;",
									"var folder = postman.getEnvironmentVariable(\"folder\");",
									"",
									"var children = jsonData.children ? jsonData.children : jsonData.data.children",
									"var keys = Object.keys(children);",
									"",
									"if (keys.length > 1) {",
									"    do{",
									"        var index = Math.floor(Math.random() * (keys.length) + 0);",
									"        var key = keys[index];",
									"        var child = jsonData.data.children[key];",
									"        ",
									"        if (child.mimestring === \"Directory\" && key !== \"/recycle_bin\"){",
									"            postman.setEnvironmentVariable(\"folder\", child.label);",
									"        }",
									"    } while(!postman.getEnvironmentVariable(\"folder\"))",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/?format=json&children=a",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var resp = xml2Json(responseBody);",
									"",
									"var added = resp.tree.nodes_diff.add;",
									"var updated = resp.tree.nodes_diff.update;",
									"",
									"tests.uploaded = added || updated;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var name = Math.random().toString(36).substring(5);",
									"var filelist = postman.setEnvironmentVariable(\"file\", name + \"lili.txt\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/io/{{workspace}}/{{file}}?format=json",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Length",
								"value": "502",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "bzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedd\n\n\nbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedbzjkhfojzafjzefefjdfjdzjigfijehzgfjizgedd\n"
						},
						"description": "upload a file"
					},
					"response": [
						{
							"id": "1c8edb9c-c684-460a-8e89-a00934a66945",
							"name": "uploaed_resp",
							"originalRequest": {
								"url": "{{url}}/v2/io/my-files/m.jpg",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Length",
										"value": "25208",
										"enabled": true,
										"description": "The length of the response body in octets (8-bit bytes)",
										"disabled": false
									},
									{
										"key": "Authorization",
										"name": "Authorization",
										"value": "Basic YWRtaW46c2VjdXJpdHk="
									}
								],
								"body": {
									"mode": "file",
									"file": {}
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"_postman_previewtype": "text",
							"header": [
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Type",
									"value": "text/xml; charset=UTF-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 09 May 2017 15:37:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.10 (Debian)",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"responseTime": 106,
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><tree ><nodes_diff><update><tree is_file=\"true\" filename=\"/m.jpg\" mimestring_id=\"13\" icon=\"image.png\" fonticon=\"file-image\" file_group=\"1\" file_owner=\"1\" ajxp_readonly=\"false\" file_perms=\"0600\" ajxp_modiftime=\"1494344238\" bytesize=\"25208\" is_image=\"1\" image_type=\"image/jpeg\" image_width=\"480\" image_height=\"358\" readable_dimension=\"480px X 358px\" ajxp_relativetime=\"Modified today at 15:37\" ajxp_description=\"Modified today at 15:37\" filesize=\"24.62 KB\" md5=\"5fb4bae6ae2152273d56e44daa09831b\" mimestring=\"JPG picture\" node_repository_id=\"1\" original_path=\"/m.jpg\" text=\"m.jpg\" ajxp_im_time=\"1494344238\"/></update></nodes_diff></tree>"
						}
					]
				},
				{
					"name": "fs/fodler",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var count = jsonData.pagination? jsonData.pagination.count : jsonData.children.length;",
									"",
									"var children = jsonData.children ? jsonData.children : jsonData.data.children",
									"var keys = Object.keys(children);",
									"",
									"if (keys.length > 1) {",
									"    do{",
									"        postman.clearEnvironmentVariable(\"file\");",
									"        var index = Math.floor(Math.random() * (keys.length) + 1);",
									"        var key = keys[index];",
									"        var child = jsonData.data.children[key];",
									"        ",
									"        if (child.mimestring !== \"Directory\" && key !== \"/recycle_bin\"){",
									"            postman.setEnvironmentVariable(\"file\", child.label);",
									"        }",
									"    } while(!postman.getEnvironmentVariable(\"file\"))",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/?format=json&children=a",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Download",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/io/{{created_ws_id}}/{{folder}}",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "get file content"
					},
					"response": []
				},
				{
					"name": "Copy file",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/{{file}}copy?format=json",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "copy_source",
									"value": "{{workspace}}/{{folder}}/{{file}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Rename file",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/{{file}}2?copy_source={{created_ws_id}}/{{folder}}/{{file}}copy&delete_source=true",
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "Rename the created file"
					},
					"response": []
				},
				{
					"name": "Delete file",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/{{file}}2?format=json",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "Delete the copied file who's in the folder"
					},
					"response": []
				},
				{
					"name": "Remove folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Request successfully precessed\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{cur_user}}",
								"password": "{{cur_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/fs/{{created_ws_id}}/{{folder}}/?format=json",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic c3dhZ286c2VjdXJlc3dhZw==",
								"description": ""
							}
						],
						"body": {},
						"description": "Remove the folder who have file in him"
					},
					"response": []
				}
			]
		},
		{
			"name": "4 - Clean",
			"description": "",
			"item": [
				{
					"name": "Remove User Role",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/people/{{new_role_id}}?format=json",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Created Role",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/roles/{{new_role_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Created workspace",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/workspaces/{{created_ws_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Created User",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{url}}/api/v2/admin/people/{{cur_user}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46UEBzc3cwcmQ=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}