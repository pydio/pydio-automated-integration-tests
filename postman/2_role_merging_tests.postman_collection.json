{
	"variables": [],
	"info": {
		"name": "2 - API V2 - Roles merging tests",
		"_postman_id": "3a1c8e40-6b28-db73-c1bb-c974f582bb7e",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1 - User",
			"description": "",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseBody.startsWith(\"{\")) {",
									"    var data = JSON.parse(responseBody);",
									"    tests[\"user created\"] = ",
									"    (data.message.level === \"Info\" && data.reload.pendingSelection === postman.getEnvironmentVariable(\"user\"));",
									"} else {",
									"    var data = xml2Json(responseBody);",
									"    ",
									"    if(data.tree.message[\"_\"].startsWith(\"User already exists\") || data.tree.message[\"_\"].startsWith(\"L'utilisateur existe, veuillez choisir un autre identifiant\")){",
									"        tests[\"already exists\"] = true;",
									"    } else {",
									"        tests[\"creation failed\"] = false;",
									"    }",
									"}",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"user\", \"xxxpydio_test_newman\");",
									"postman.setEnvironmentVariable(\"password\", \"newman\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/{{user}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"{{user}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "resourceType",
									"value": "user",
									"type": "text"
								},
								{
									"key": "userPass",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var rjson = JSON.parse(responseBody);",
									"",
									"var userPath = postman.getEnvironmentVariable(\"user\");",
									"",
									"var userDetails = rjson.children[userPath];",
									"if (userDetails) {",
									"    tests[\"found created user\"] = true;",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2 - Groups",
			"description": "",
			"item": [
				{
					"name": "Workspace list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody);",
									"var keys = Object.keys(data.data.children);",
									"",
									"var repos = [];",
									"",
									"for (var i = 0; i < keys.length; i++) {",
									"    var child = data.data.children[keys[i]];",
									"    var repo_id = child.repository_id;",
									"    repos.push(repo_id);",
									"} ",
									"postman.setEnvironmentVariable(\"workspaces\", JSON.stringify(repos));",
									"",
									"tests[\"My files\"] = repos.indexOf(\"1\") > -1;",
									"tests[\"Common files\"] = repos.indexOf(\"0\") > -1;",
									"tests[\"Shared files\"] = repos.indexOf(\"inbox\") > -1;",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/workspaces?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"workspaces"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(tests[\"Status code is 200\"] === true) {",
									"    if(responseBody.startsWith(\"{\")) {",
									"        var data = JSON.parse(responseBody);",
									"        tests[\"group created\"] = data.message.message.startsWith(\"Group was successfully created\");",
									"        ",
									"    } else {",
									"        var data = xml2Json(responseBody);",
									"        ",
									"        if(data.tree.message[\"_\"].startsWith(\"Group with this name already exists\")){",
									"            tests[\"already exists\"] = true;",
									"            ",
									"        } else {",
									"            tests[\"creation failed\"] = false;",
									"        }",
									"    }",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"group_id\", \"xxxpydio_test_riders\");",
									"postman.setEnvironmentVariable(\"group_label\", \"Les motards\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people//{{group_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"",
								"{{group_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "groupLabel",
									"value": "{{group_label}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List groups & users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var rjson = JSON.parse(responseBody);",
									"",
									"var groupPath = \"/\" + postman.getEnvironmentVariable(\"group_id\");",
									"var groupDetails = rjson.children[groupPath];",
									"",
									"if (groupDetails) {",
									"    tests[\"found created group\"] = true;",
									"    postman.setEnvironmentVariable(\"group_role_id\", groupDetails.group_role_id);",
									"    postman.setEnvironmentVariable(\"group_path\", groupDetails.path);",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Set Group acl",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var role = JSON.parse(postman.getEnvironmentVariable(\"group_acl_value\"));",
									"",
									"var lkeys = Object.keys(role.ACL);",
									"var matches = true",
									"for (var i = 0; i < lkeys.Length; i++){",
									"    var k = lkeys[i];",
									"    ",
									"    matches &= (role.ACL[k] === jsonData.ACL[k]);",
									"}",
									"",
									"tests[\"received matches with sent\"] = matches;",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var acls = [\"r\", \"w\", \"rw\", \"\"];",
									"var role = {",
									"    \"ACL\":{},",
									"    \"MASKS\": {},",
									"    \"ACTIONS\": {},",
									"    \"PARAMETERS\": {},",
									"    \"APPLIES\": {}",
									"};",
									"",
									"var index = function () {",
									"    return Math.floor(Math.random() * 4);",
									"}",
									"",
									"var repos = JSON.parse(postman.getEnvironmentVariable(\"workspaces\"));",
									"",
									"for (var i = 0; i < repos.length; i++) {",
									"    var repo = repos[i];",
									"    if (repo !== \"fs_template\" && repo != \"ajxp_home\") {",
									"        var acl = acls[index()];",
									"        role.ACL[repo] = acl;",
									"    }",
									"}",
									"",
									"var roleStr = JSON.stringify(role);",
									"console.log(roleStr);",
									"",
									"postman.setEnvironmentVariable(\"group_acl_value\", roleStr);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles{{group_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles{{group_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{group_acl_value}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Get group details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var role = JSON.parse(postman.getEnvironmentVariable(\"group_acl_value\"));",
									"var lkeys = Object.keys(role.ACL);",
									"var matches = true;",
									"for (var i = 0; i < lkeys.Length && matches; i++) {",
									"    var k = lkeys[i];",
									"    matches &= (role.ACL[k] === jsonData.ACL[k]);",
									"}",
									"tests[\"received matches with sent\"] = matches;",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles{{group_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles{{group_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3 - roles",
			"description": "",
			"item": [
				{
					"name": "Create role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseBody.startsWith(\"{\")){",
									"    console.log(\"might be json\");",
									"    var rjson = JSON.parse(responseBody);",
									"    tests[\"role created\"] = rjson.message.message.startsWith(\"Role successfully created\");",
									"    ",
									"} else if (responseBody.startsWith(\"<?\")) {",
									"    ",
									"    console.log(\"might be xml\");",
									"    var rjson = xml2Json(responseBody);",
									"    console.log(JSON.stringify(rjson));",
									"    ",
									"    if(rjson.tree.message[\"_\"].startsWith(\"Role already exists\")){",
									"        tests[\"already exists\"] = true;",
									"    } else {",
									"        tests[\"created\"] = false;",
									"    }",
									"    ",
									"} else {",
									"    console.log(\"shit! it's fucked up\");",
									"    tests[\"created\"] = false",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"new_role_id\", \"xxxpydio_test_players\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles/{{new_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles",
								"{{new_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Set role acls",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var role = JSON.parse(postman.getEnvironmentVariable(\"role_acl_value\"));",
									"",
									"var lkeys = Object.keys(role.ACL);",
									"var matches = true",
									"for (var i = 0; i < lkeys.Length; i++){",
									"    var k = lkeys[i];",
									"    matches &= (role.ACL[k] === jsonData.ACL[k]);",
									"}",
									"",
									"tests[\"received matches with sent\"] = matches;",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var acls = [\"r\", \"w\", \"rw\", \"\"];",
									"var role = {",
									"    \"ACL\":{},",
									"    \"MASKS\": {},",
									"    \"ACTIONS\": {},",
									"    \"PARAMETERS\": {},",
									"    \"APPLIES\": {}",
									"};",
									"",
									"var index = function () {",
									"    return Math.floor(Math.random() * 4);",
									"}",
									"",
									"var repos = JSON.parse(postman.getEnvironmentVariable(\"workspaces\"));",
									"",
									"for (var i = 0; i < repos.length; i++) {",
									"    var repo = repos[i];",
									"    if (repo !== \"fs_template\" && repo != \"ajxp_home\") {",
									"        var acl = acls[index()];",
									"        role.ACL[repo] = acl;",
									"    }",
									"}",
									"",
									"var roleStr = JSON.stringify(role);",
									"console.log(roleStr);",
									"",
									"postman.setEnvironmentVariable(\"role_acl_value\", roleStr);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles/{{new_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles",
								"{{new_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{role_acl_value}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var rjson = JSON.parse(responseBody);",
									"",
									"var codeIs200 = responseCode.code === 200",
									"tests[\"Status code is 200\"] = codeIs200;",
									"",
									"if (codeIs200) {",
									"    var roleId = postman.getEnvironmentVariable(\"new_role_id\");",
									"    tests[\"Found created role\"] = rjson.children[roleId];",
									"    ",
									"    if (rjson.children[roleId]){",
									"        var setAcl = JSON.parse(postman.getEnvironmentVariable(\"role_acl_value\")).ACL;",
									"        var receivedAcl = rjson.children[roleId].role.ACL;",
									"        ",
									"        var keys = Object.keys(receivedAcl);",
									"        var matches = true;",
									"        ",
									"        for (var i = 0; i < keys.length; i++){",
									"            var k = keys[i];",
									"            matches &= (setAcl[k] === receivedAcl[k]);",
									"        }",
									"        tests[\"and acl matches\"] = matches;",
									"    }",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4 - Users & group",
			"description": "",
			"item": [
				{
					"name": "Add user to group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var rjson = JSON.parse(responseBody);",
									"",
									"var codeIs200 = responseCode.code === 200",
									"tests[\"Status code is 200\"] = codeIs200;",
									"",
									"if (codeIs200) {",
									"    tests[\"user added to group\"] = rjson.message.message.indexOf(\"were moved to group \" + postman.getEnvironmentVariable(\"group_role_id\"));",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/ajxp_conf/user_update_group/{{user}}{{group_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"ajxp_conf",
								"user_update_group",
								"{{user}}{{group_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "List user of the group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var rjson = JSON.parse(responseBody);",
									"",
									"var user = postman.getEnvironmentVariable(\"user\");",
									"var userDetails = rjson.children[user];",
									"tests[\"Found user in group\"] = userDetails;",
									"if (userDetails){",
									"    var merged = JSON.stringify(userDetails.json_merged_role.ACL);",
									"    postman.setEnvironmentVariable(\"user_merged_acl\", merged);",
									"}",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/AJXP_GRP_{{group_path}}/?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"AJXP_GRP_{{group_path}}",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5 - User & roles",
			"description": "",
			"item": [
				{
					"name": "Assign role to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/AJXP_USR_/{{user}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"AJXP_USR_",
								"{{user}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"resourceType\":\"user\",\"parameterName\":\"userAddRole\",\"parameterValue\":\"{{new_role_id}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Check merged role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var rjson = JSON.parse(responseBody);",
									"var merged = rjson.node.json_merged_role.ACL;",
									"var groupACL = JSON.parse(postman.getEnvironmentVariable(\"group_acl_value\"));",
									"var roleACL = JSON.parse(postman.getEnvironmentVariable(\"role_acl_value\"));",
									"",
									"var matches = true;",
									"var keys = Object.keys(roleACL);",
									"for (var i = 0; matches && i < keys.length; i++ ){",
									"    var k = keys[k];",
									"    var sum = roleACL[k];",
									"    if (!sum) {",
									"        sum = groupACL[k];",
									"    }",
									"    matches = merged[k] === sum;",
									"}",
									"",
									"tests[\"Received merged role matches with calculated merged role\"] = matches;",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/AJXP_GRP_{{group_path}}/{{user}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"AJXP_GRP_{{group_path}}",
								"{{user}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "6 - clean",
			"description": "",
			"item": [
				{
					"name": "Delete created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var rjson = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var alreadyDeleted = rjson.message.message.startsWith(\"Successfully deleted group (1)\");",
									"var deleted = rjson.message.message.startsWith(\"User successfully erased (1)\");",
									"",
									"if(alreadyDeleted){",
									"    tests[\"User already deleted\"] = true;",
									"} else if (deleted){",
									"    tests[\"User deleted\"] = true;",
									"} else {",
									"    tests[\"Failed to delete user\"] = true;",
									"}",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people/{{user}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"{{user}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"if (responseBody.startsWith(\"{\")){",
									"    var rjson = JSON.parse(responseBody);",
									"    tests[\"User deteleted\"] = rjson.message.message.startsWith(\"Successfully deleted\");",
									"    ",
									"} else if (responseBody.startsWith(\"<?\")){",
									"    var rjson = xml2Json(responseBody);",
									"     ",
									"    if(rjson.tree.message[\"_\"].startsWith(\"Cannot find role\")){",
									"        tests[\"role does not exists\"] = true;",
									"    } else {",
									"        tests[\"Deletion failed\"] = false;",
									"    }",
									"    ",
									"} else {",
									"    tests[\"Deletion failed\"] = false;",
									"}",
									"",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/roles/{{new_role_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"roles",
								"{{new_role_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if(tests[\"Status code is 200\"] === true) {",
									"    if(responseBody.startsWith(\"{\")) {",
									"        var data = JSON.parse(responseBody);",
									"        tests[\"group deleted\"] = data.message.message.startsWith(\"Successfully deleted group (1)\");",
									"    }",
									"}",
									"",
									"var rt = postman.getEnvironmentVariable(\"request_time\");",
									"var rtKey = \"Response time is less than \" + rt + \"ms\";",
									"tests[rtKey] = responseTime < parseInt(rt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{admin}}",
								"password": "{{admin_password}}",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/admin/people//{{group_id}}?format=json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"admin",
								"people",
								"",
								"{{group_id}}"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46c2VjdXJpdHk=",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}